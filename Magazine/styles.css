*, ::before, ::after{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

html{
    /* üëáüèª This will set the default font size for your web page to 10px */ 
    /* otherwise the default font-size of an element for any web page is set to 16px */
    font-size: 62.5%;
}

body{
    font-family: Baskervville, serif;
    color: linen;
    background-color: rgb(20, 30, 40);
}

h1{
    font-family: Anton, sans-serif;
}

h2, h3, h4, h5, h6{
    font-family: Raleway, sans-serif;
}

a{
    text-decoration: none;
    color: linen;
}

main{
    display: grid;

    /* üëáüèª This will create three columns where the middle column is 94rem wide, and the first and last columns are both 1 fraction of the remaining space in the grid container.  */

    grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(2rem, 1fr);

    /* üëÜüèª The minmax function takes two arguments, the first being the minimum value and the second being the maximum. These values could be a length, percentage, fr, or even a keyword like max-content. */

    /* To add space b/w the rows in the grid layout, we can use the [row-gap] property. */
    row-gap: 3rem; /* here 3rem == 30px*/
}

.heading{
    /* NOTE: For additional control over the layout of your content, you can have a CSS Grid within a CSS Grid. */
    display: grid;
    /* this will tell the [.heading] element to start at grid line 2 and end at grid line 3 */
    grid-column: 2/3;

    /* The CSS repeat() function is used to repeat a value, rather than writing it out manually, and is helpful for grid layouts. For example, setting the grid-template-columns property to repeat(20, 200px) would create 20 columns each 200px wide. */
    grid-template-columns: repeat(2, 1fr);
    row-gap: 1.5rem; /* here 1.5rem == 15px*/
}

.text{
    grid-column: 2/3;
    font-size: 1.8rem;
    letter-spacing: 0.6px;
    /* this [.text] element is not a CSS Grid, 
    but you can create columns within an element without using Grid by using the [column-width] property. */
    column-width: 25rem;

    /* to make this project look like a printed magzine, i.e. we set [text-align]  */
    text-align: justify;
}

.hero{
    /* There may be times where you are unsure of how many columns your grid will have, but you want an element to stop at the last column. To do this, you can use -1 for the end column. */
    grid-column: 1/-1;
    position: relative;
}

img{
    width: 100%;
    /* The object-fit property tells the browser how to position the element within its container. */
    /* In this case, cover will set the image to fill the container, cropping as needed to avoid changing the aspect ratio. */
    object-fit: cover;
}

.hero-title{
    text-align: center;
    color: orangered;
    font-size: 8rem; /* here 8rem == 80px*/
}

.hero-subtitle{
    font-size: 2.4rem;
    color: orangered;
    text-align: center;
}

.author{
    font-size: 2rem;
    font-family: Raleway, sans-serif;
}

.author-name a:hover{
    /* This will create a hover effect only for the a element within the .author-name, showing the original freeCodeCamp green in the background. */
    background-color: #306203;
}

.publish-date{
    color: rgba(255, 255, 255, 0.5);
}

.social-icons{
    display: grid;
    font-size: 3rem; /* here 3rem == 30px */
    grid-template-columns: repeat(5, 1fr);

    /* üëáüèª grid-auto-flow uses an auto-placement algorithm to adjust the grid layout. Setting it to column will tell the algorithm to create new columns for content as needed. */
    grid-auto-flow: column;

    /* after applying [grid-auto-flow] value to the element...*/
    /* Now the auto-placement algorithm will kick in whenever you add a new icon elemen */
    /* However, the algorithm defaults the new column width to be auto, which will not match your current columns. */
    /* You can override this with the [grid-auto-columns] property */
    grid-auto-columns: 1fr;
    align-items: center;
}

/* The [::first-letter] pseudo-selector allows you to target the first letter in the text content of an element. */
.first-paragraph::first-letter{
    font-size: 6rem;
    color: orangered;
    float: left;
    margin-right: 1rem;
}

hr{
    margin: 1.5rem 0;
    border: 1px solid rgba(120, 120, 120, 0.6);
}

.quote{
    color: #00beef;
    font-size: 2.4rem;
    text-align: center;
    font-family: Raleway, sans-serif;
}

/* always remember to use single quote while using [content] proptery in CSS */
.quote::before{
    content: '" ' ;
}

.quote::after{
    content: ' "';
}

.text-with-images{
    display: grid;
    grid-template-columns: 1fr 2fr;
    column-gap: 3rem;
    margin-bottom: 3rem;
}

.lists{
    list-style-type: none;
    margin-top: 2rem;
}

.lists li{
    margin-bottom: 1.5rem;
}

.list-title, .list-subtitle{
    color: #00beef;
}
